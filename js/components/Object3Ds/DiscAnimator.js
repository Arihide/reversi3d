import { Black, White } from 'reversi.js';

import { Clock, QuaternionKeyframeTrack, AnimationClip, AnimationMixer, LoopOnce } from 'three'

var mixers = new Map();
var updateDiscMeshes = [];

var timeScale = 1;

var flipingClip;
var placeJSON;
var placeQuaternionTracks;

flipingClip = AnimationClip.parse({
    "name": "FlipToWhite",
    "duration": 0.583333,
    "tracks": [
        {
            "name": ".position[y]",
            "times": [0, 0.041666701436042786, 0.08333329856395721, 0.125, 0.16666699945926666, 0.20833300054073334, 0.25, 0.29166701436042786, 0.33333298563957214, 0.375, 0.41666701436042786, 0.45833298563957214, 0.5, 0.5416669845581055, 0.5833330154418945],
            "values": [0, 9.596199989318848, 18.63520050048828, 24.9197998046875, 27.975799560546875, 29.282100677490234, 29.8169002532959, 30, 30.016700744628906, 29.806299209594727, 29.068300247192383, 27.037399291992188, 21.86720085144043, 11.989700317382812, 0],
            "type": "number"
        }, {
            "name": ".quaternion",
            "times": [0, 0.20833300054073334, 0.25, 0.29166701436042786, 0.33333298563957214, 0.375, 0.5833330154418945],
            "values": [0, 0, 0, 1, 5.031250225329131e-7, -2.502009976979025e-7, 0.03489939868450165, 0.9993910193443298, 6.440969855248113e-7, -2.5114800905612356e-7, 0.1650480031967163, 0.9862859845161438, 6.238229843802401e-7, -2.964629963742027e-8, 0.4383710026741028, 0.8987939953804016, 2.000849974592711e-7, 5.655700192619406e-7, 0.8038570284843445, 0.5948230028152466, -4.866470248998667e-7, 0.0000012236599786774605, 0.9876880049705505, 0.15643499791622162, 0, 0, -1, 0],
            "type": "quaternion"
        }
    ]
});

placeJSON = {
    "name": "place",
    "duration": 1.04167,
    "tracks": [
        {
            "name": ".position",
            "times": [0, 0.041666701436042786, 0.08333329856395721, 0.125, 0.16666699945926666, 0.20833300054073334, 0.25, 0.29166701436042786, 0.33333298563957214, 0.375, 0.41666701436042786, 0.45833298563957214, 0.5, 0.5416669845581055, 0.5833330154418945, 0.625, 0.6666669845581055, 0.7083330154418945, 0.75, 0.7916669845581055, 0.8333330154418945, 0.875, 0.9166669845581055, 0.9583330154418945, 1, 1.0416699647903442],
            "values": [0.0000033380199511157116, 30, -0.00003245389962103218, 0.0000033195599371538265, 29.885099411010742, -0.00003234170071664266, 0.0000032640400604577735, 29.501399993896484, -0.00003200300125172362, 0.0000031683700854046037, 28.769899368286133, -0.00003143589856335893, 0.0000030237599730753573, 27.568300247192383, -0.000030641400371678174, 0.000002810380010487279, 25.691699981689453, -0.000029623699447256513, 0.0000024838200261001475, 22.75909996032715, -0.000028391299565555528, 0.0000019376800537429517, 17.96769905090332, -0.000026956999136018567, 9.60381953518663e-7, 9.768389701843262, -0.000025339200874441303, 6.821210263296962e-13, 0.0000019073499970545527, -0.00002356120057811495, 0.2251410037279129, 6.382669925689697, -0.00002165200021408964, 0.47854700684547424, 8.851719856262207, -0.000019645100110210478, 0.7198140025138855, 10.01159954071045, -0.000017578000552020967, 0.9217470288276672, 10.599200248718262, -0.000015490499208681285, 1.0716899633407593, 10.88860034942627, -0.000013423299606074579, 1.1689000129699707, 10.607500076293945, -0.00001141640041169012, 1.220039963722229, 9.240010261535645, -0.000009507230060989968, 1.2348300218582153, 4.379439830780029, -0.000007729289791313931, 0.8778079748153687, 3.480289936065674, -0.000006111440143286018, 0.18479600548744202, 1.0484299659729004, -0.000004677210199588444, -0.2710300087928772, 1.440440058708191, -0.0000034447500638634665, -0.5158119797706604, 2.3764100074768066, -0.000002427080062261666, -0.09775540232658386, 0.6004959940910339, -0.000001632550038266345, 0.21640999615192413, 1.1972099542617798, -0.000001065449964698928, 0.09775540232658386, 0.6004959940910339, -7.267340151884127e-7, 0, 0, 0],
            "type": "vector"
        }
    ]
};

placeQuaternionTracks = [
    new QuaternionKeyframeTrack(".quaternion", [0, 0.375, 0.41666701436042786, 0.45833298563957214, 0.5, 0.5416669845581055, 0.5833330154418945, 0.625, 0.6666669845581055, 0.7083330154418945, 0.75, 0.7916669845581055, 0.8333330154418945, 0.875, 0.9166669845581055, 0.9583330154418945, 1, 1.0416699647903442], [0, 0, 0, 1, 0, 0, 0, 1, -6.295789898528442e-14, 1.7247000268921786e-13, -0.0360725000500679, 0.9993489980697632, -6.795670119295535e-14, 1.7390499847461105e-13, -0.06589309871196747, 0.9978269934654236, -7.184429781778232e-14, 1.7492500232595826e-13, -0.08929769694805145, 0.9960049986839294, -7.469459756661093e-14, 1.7561699436254713e-13, -0.1065789982676506, 0.9943040013313293, -7.663699996872733e-14, 1.760620051442438e-13, -0.11841599643230438, 0.9929640293121338, -7.783139773951883e-14, 1.7632400259922493e-13, -0.12571999430656433, 0.9920660257339478, -7.844149863076716e-14, 1.7645399843970594e-13, -0.1294579952955246, 0.9915850162506104, -7.861579768252136e-14, 1.76490996838842e-13, -0.13052600622177124, 0.991445004940033, -7.40993976789707e-14, 1.7547699675702494e-13, -0.1029609963297844, 0.9946849942207336, -6.202469907037184e-14, 1.7218699881714483e-13, -0.030538499355316162, 0.999534010887146, -4.962320159819511e-14, 1.6798899511033527e-13, 0.04204529896378517, 0.9991160035133362, -4.4809401550599884e-14, 1.6614999849041967e-13, 0.06975650042295456, 0.9975640177726746, -5.3858600115560054e-14, 1.6951200100707997e-13, 0.01745240017771721, 0.9998480081558228, -6.276020149539527e-14, 1.7241000565149794e-13, -0.034899499267339706, 0.9993910193443298, -5.981090053569157e-14, 1.7149599611503835e-13, -0.01745240017771721, 0.9998480081558228, 0, 0, 0, 1]),
    new QuaternionKeyframeTrack(".quaternion", [0, 0.375, 0.41666701436042786, 0.45833298563957214, 0.5, 0.5416669845581055, 0.5833330154418945, 0.625, 0.6666669845581055, 0.7083330154418945, 0.75, 0.7916669845581055, 0.8333330154418945, 0.875, 0.9166669845581055, 0.9583330154418945, 1, 1.0416699647903442], [0, 0, -1, 0, 0, 0, -1, 0, -9.070640203390212e-7, 0.0000018272600073032663, 0.9993489980697632, 0.0360725000500679, -8.500069839101343e-7, 0.00000179535004463105, 0.9978269934654236, 0.06589289754629135, -8.046120001381496e-7, 0.0000017691299944999628, 0.9960049986839294, 0.08929809927940369, -7.707490112807136e-7, 0.0000017491199741925811, 0.9943040013313293, 0.1065789982676506, -7.473830123672087e-7, 0.0000017350799907944747, 0.9929640293121338, 0.11841599643230438, -7.328949891416414e-7, 0.0000017262799474337953, 0.9920660257339478, 0.12571999430656433, -7.254599836414855e-7, 0.0000017217399772562203, 0.9915850162506104, 0.1294579952955246, -7.233319934130122e-7, 0.0000017204399682668736, 0.991445004940033, 0.13052600622177124, -7.77860009293363e-7, 0.000001753350034050527, 0.9946849942207336, 0.1029609963297844, -9.175579975817527e-7, 0.0000018330000557398307, 0.999534010887146, 0.030538000166416168, 0.0000010524199751671404, -0.0000019029799886993715, -0.9991160035133362, 0.04204550012946129, 0.0000011025499588868115, -0.0000019270999018772272, -0.9975640177726746, 0.06975559890270233, 0.0000010073000566990231, -0.0000018803699504132965, -0.9998480081558228, 0.017451999709010124, -9.092909749597311e-7, 0.000001828479980758857, 0.9993910193443298, 0.03489900007843971, -9.422519724466838e-7, 0.0000018463399555912474, 0.9998480081558228, 0.017451800405979156, 0, 0, -1, 0])
];

export default class DiscAnimator {

    constructor() {

        this._mixer = new AnimationMixer();
        this._clock = new Clock();

    }

    update() {

        this._mixer.update(this._clock.getDelta());

    }

    async playPlacingAnim(discMesh, color) {

        if (color === undefined) {
            throw new Error("color is undefined");
        }

        let clip = new AnimationClip.parse(placeJSON);

        for (let i = 0, l = clip.tracks[0].values.length; i < l; i += 3) {

            clip.tracks[0].values[i] += discMesh.position.x;
            clip.tracks[0].values[i + 2] += discMesh.position.z;

        }

        clip.tracks.push(placeQuaternionTracks[color]);

        let action = this._mixer.clipAction(clip, discMesh);
        action.timeScale = timeScale;
        action.setLoop(LoopOnce);
        action.play();

        return new Promise((resolve, reject) => {

            let self = this;

            this._mixer.addEventListener('finished', function onFinished(e) {

                if (e.action === action) {

                    self._mixer.removeEventListener('finished', onFinished);
                    action.stop();
                    self._mixer.uncacheAction(action, discMesh);

                    resolve();
                }
            });

        });

    }

    async playFlipingAnim(discMesh, afterColor) {

        let action = this._mixer.clipAction(flipingClip, discMesh);
        action.setLoop(LoopOnce);

        action.clampWhenFinished = true;
        action.paused = false;
        action.timeScale = timeScale;

        if (afterColor === Black) {

            action.time = flipingClip.duration;
            action.timeScale = -timeScale;

        }

        action.play();

        return new Promise((resolve, reject) => {

            let self = this;

            this._mixer.addEventListener('finished', function onFinished(e) {

                if (e.action === action) {

                    self._mixer.removeEventListener('finished', onFinished);

                    resolve();

                }

            });
        });

    }

}